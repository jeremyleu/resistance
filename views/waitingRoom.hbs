<!--<script src="/waitingroom.js" type = "text/babel"></script>-->

<h3 id = "header">Access Code:</h3>
<h1 id = "accessCode">{{accessCode}}</h1>

<div id = "roleinfo" class = "status"></div>
<br>
<div id = "cardTrack" style="display:none">
</div>
<div id = "status" class = "status">
  <div id = "leadinfo" class="leadStuff status">You are the leader. Propose <span id = "questNumPeople"></span> players to go on quest <span id = "currentQuest"></span>.<br></div>
</div>

<div id = "questTrackText" class = "displayOnStart" style = "margin-top: 15px;">Quest Track:</div>
<div id = "questTrack" class="displayOnStart">
  <span id = "quest1" class = "glyphicon glyphicon-question-sign questGlyph"></span>
  <span id = "quest2" class = "glyphicon glyphicon-question-sign questGlyph"></span>
  <span id = "quest3" class = "glyphicon glyphicon-question-sign questGlyph"></span>
  <span id = "quest4" class = "glyphicon glyphicon-question-sign questGlyph"></span>
  <span id = "quest5" class = "glyphicon glyphicon-question-sign questGlyph"></span>
</div>
<div id = "questTextContainer" class="displayOnStart">
  <span id = "questtext1" class = "questText">2</span>
  <span id = "questtext2" class = "questText">3</span>
  <span id = "questtext3" class = "questText">2</span>
  <span id = "questtext4" class = "questText">2</span>
  <span id = "questtext5" class = "questText">2</span>
</div>
<div id = "twoFailsNote" style="display: none; margin-bottom: 10px;">
  Note: To fail quest 4, bad guys must play two fail cards!
</div>
<table class = "table" id = "connectedPlayers">
  <thead>
    <tr>
      <th id = "tableTitle">Connected Players: <span id = "numPlayers">{{numPlayers}}</span><span class = "removeOnStart">/10</span></th>
    </tr>
  </thead>
  {{#each players}}
  <tr>
    <td id = "{{{IDString}}}">
      <span class = "playerName">{{name}}</span><span class = "leadPlayer"></span><span class = "voteIcon"></span><span class = "missionIcon"></span>
    </td>
  </tr>
  {{/each}}
</table>

{{#if host}}
  <button id = "startbtn" class = "btn btn-lg btn-secondary" disabled>Start</button>
{{/if}}
<div id = "proposeStatus" class = "status leadStuff"></div>
<div id = "voteStatus" class = "status voteStuff"></div>
<div id = "missionStatus" class = "status missionStuff"></div>
<div id = "assassinateStatus" class = "status" style="display:none">You have not yet selected a target to assassinate.</div>
<br><br>
<button id = "proposebtn" class = "btn btn-lg btn-secondary leadStuff" disabled>Submit</button>
<button id = "approvebtn" class = "btn btn-lg btn-secondary voteStuff votebtn">Approve</button>
<button id = "rejectbtn" class = "btn btn-lg btn-secondary voteStuff votebtn">Reject</button>
<button id = "successbtn" class = "btn btn-lg btn-secondary missionStuff missionbtn">Success</button>
<button id = "failbtn" class = "btn btn-lg btn-secondary missionStuff missionbtn">Fail</button>
<button id = "assassinatebtn" class = "btn btn-lg btn-secondary" style="display:none">Assassinate</button>
<a href = "/" id = "homebtn" class = "btn btn-lg btn-secondary" style="display:none">Back to homepage</a>

<script id = "ID">
  {{ID}}
</script>
<script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
<script>
  $(function() {
    var ID = parseInt($('#ID').text());
    var accessCode = parseInt($('#accessCode').text());
    var numPlayers = parseInt($('#numPlayers').text());
    var leadPlayer;
    var playersChosen = [];
    var playersNeeded;
    var proposeStatus;
    var players;
    var quests;
    var currentQuest;
    var cardsPlayed = [];
    if(numPlayers >= 5)
    {
      $('#startbtn').prop('disabled', false);
    }
    var IO = {

        /**
         * This is called when the page is displayed. It connects the Socket.IO client
         * to the Socket.IO server
         */
        init: function() {
            IO.socket = io.connect();
            IO.socket.emit('playerJoinGame', {name: $('#player' + ID).text(), roomID: $('#accessCode').text()});
            IO.socket.emit('joinedWaitingRoom', $('#accessCode').text());
            IO.bindEvents();
        },

        /**
         * While connected, Socket.IO will listen to the following events emitted
         * by the Socket.IO server, then run the appropriate function.
         */
        bindEvents : function() {
            //IO.socket.on('connected', IO.onConnected );
            //IO.socket.on('newGameCreated', IO.onNewGameCreated );
            IO.socket.on('playerJoinedRoom', IO.playerJoinedRoom );
            IO.socket.on('gameStarted', IO.gameStarted);
            IO.socket.on('questProposed', IO.questProposed);
            IO.socket.on('voteCounted', IO.voteCounted);
            IO.socket.on('cardCounted', IO.cardCounted);
            IO.socket.on('votingTrackGameEnd', IO.votingTrackGameEnd);
            IO.socket.on('assassinationComplete', IO.assassinationComplete);
        },

        playerJoinedRoom : function(players) {
          for(var i = 0; i < players.length; i++)
          {
            //console.log('#player' + i + ' ' + $('#player' + i).length);

            if($('#player' + i).length === 0)
            {
              //console.log('xxx');
              $('<tr><td id = player' + numPlayers+ '><span class = "playerName">' + players[i].name + '</span><span class = "leadPlayer"></span><span class = "voteIcon"></span><span class = "missionIcon"></span></td></tr>').hide().appendTo('#connectedPlayers').fadeIn(500);
            }
            else if($('#player' + i + ' .playerName').text() != players[i].name)
              $('#player' + i + ' .playerName').text(players[i].name);
          }
            $('#numPlayers').text(++numPlayers);
            //console.log(numPlayers);
            if(numPlayers >= 5)
            {
              $('#startbtn').prop('disabled', false);
            }
            //console.log("hello");
        },

        gameStarted : function(data) {
          players = data.players;
          quests = data.quests;
          if(players.length >= 7)
            $('#twoFailsNote').css('display', 'block')
          currentQuest = 1;
          $('.removeOnStart').css('display', 'none');
          $('.displayOnStart').css('display', 'block');
          $('.displayOnStart').css('display', '-webkit-flex');
          $('.displayOnStart').css('display', 'flex');
          $('#quest1').addClass('currentQuest');
          $('#questtext1').addClass('currentQuestText');
          for(var h = 0; h < quests.length; h++)
            $('#questtext' + (h+1)).text(quests[h].numberOfPlayers);
          $('#header').text('Hello');
          $('#accessCode').text(players[ID].role);
          var badguys = [];
          var merlins = [];
          for(var i = 0; i < players.length; i++)
          {
            if(players[i].role == 'Merlin')
              merlins.push(players[i].name);
            else if(players[i].role == 'Morgana')
            {
              badguys.push(players[i].name);
              merlins.push(players[i].name);
            }
            else if(players[i].role == 'Assassin')
              badguys.push(players[i].name);
            else if(players[i].role == 'Generic Bad Guy')
              badguys.push(players[i].name);
            if(players[i].lead)
            {
              $('#player' + players[i].playerID + ' .leadPlayer').addClass("glyphicon glyphicon-king");
              leadPlayer = players[i].playerID;
            }
          }
          ////console.log("badguys: " + badguys);
          ////console.log("merlins: " + merlins);
          merlins = shuffle(merlins);
          badguys = shuffle(badguys);

          ////console.log("shuffled badguys: " + badguys);
          ////console.log("shuffled merlins: " + merlins);

          if(badguys.indexOf(players[ID].name) > -1)
            badguys.splice(badguys.indexOf(players[ID].name), 1);
          var displayMerlins = merlins[0];
          var displayBadguys = badguys[0];
          for(var j = 1; j < merlins.length; j++)
            displayMerlins += ', ' + merlins[j];
          for(var k = 1; k < badguys.length; k++)
            displayBadguys += ', ' + badguys[k];
          if(players[ID].role == 'Merlin')
            $('#roleinfo').html('Minions of Mordred: ' + displayBadguys);
          else if(players[ID].role == 'Percival')
            $('#roleinfo').html('Appear as Merlin: ' + displayMerlins);
          else if(players[ID].role == 'Morgana' || players[ID].role == 'Assassin' || players[ID].role == 'Generic Bad Guy')
          {
            if(badguys.length > 1)
              $('#roleinfo').html('Other Minions of Mordred: ' + displayBadguys);
            else
              $('#roleinfo').html('Other Minion of Mordred: ' + displayBadguys);
          }

          if(ID === leadPlayer)
          {
            //console.log(quests);
            prepareLead(quests, 1);
          }
          else {
            $('#status').html("Waiting for leader to propose a quest...<br>Current voting track: "+ quests[currentQuest - 1].votingTrack + '/5')
          }
        },

        questProposed: function(data)
        {
          $('#cardTrack').css('display', 'none');
          $('#cardTrack').empty();
          playersChosen = data.playersChosen;
          //console.log('questProposed received with playersChosen ' + data.playersChosen);
          quests = data.quests;
          var displayProposed = players[data.playersChosen[0]].name + ' and ' + players[data.playersChosen[1]].name;
          for(var i = 2; i < data.playersChosen.length; i++)
            displayProposed = players[data.playersChosen[i]].name + ', ' + displayProposed;
          $('#status').text(players[data.lead].name + ' proposed a quest. Current voting track: ' + quests[data.currentQuest - 1].votingTrack + '/5');
          $('#voteStatus').html(players[data.lead].name + ' proposes that ' + displayProposed + ' go on this quest.');
          $('.voteStuff').css('display', 'inline');
          $('.voteIcon').removeClass('glyphicon-ok');
          $('.voteIcon').removeClass('glyphicon-remove');
          $('.voteIcon').addClass('glyphicon glyphicon-time');
        },

        voteCounted: function(data)
        {
          playersChosen = data.playersChosen;
          quests = data.quests;
          players = data.players;

          for(var i = 0; i < players.length; i++)
          {
            if(players[i].vote != null)
            {
              $('#player' + i +' .voteIcon').removeClass('glyphicon-time');
            }
          }
          if(data.votePassed != null)
          {
            $('.voteStuff').css('display', 'none');
            players[leadPlayer].lead = false;
            $('#player' + leadPlayer + ' .leadPlayer').removeClass("glyphicon glyphicon-king");
            if(leadPlayer == players.length - 1)
              leadPlayer = 0;
            else {
              leadPlayer++;
            }
            players[leadPlayer].lead = true;
            for(var i = 0; i < players.length; i++)
            {
              $('#player' + i +' .voteIcon').addClass((players[i].vote == true) ? 'glyphicon-ok' : 'glyphicon-remove');
              players[i].vote = null;
            }
            if(data.votePassed)
              votePassed(data.playersChosen);
            else if(data.votePassed == false)
              voteFailed();
          }
        },


        /*
        io.to('' + room).emit('cardCounted', {
          players: players,
          allCardsReceived: allCardsReceived,
          cardsPlayed: data.cardsPlayed,
          quests: data.quests,
          currentQuest: data.currentQuest;
        });*/
        cardCounted: function(data)
        {
          quests = data.quests;
          cardsPlayed = data.cardsPlayed;
          $('#player' + data.player + ' .missionIcon').removeClass('glyphicon glyphicon-time');
          if(data.gameEndReason)
            endGame(data.gameEndReason);
          //console.log("cardCounted received with cardsPlayed: " + cardsPlayed);
          if(data.allCardsReceived)
          {

            var cardTrack = [];
            for(var i = 0; i < cardsPlayed.length; i++)
            {
              if(cardsPlayed[i])
                cardTrack.push('<span class = "glyphicon glyphicon-ok"></span>')
              else {
                cardTrack.push('<span class = "glyphicon glyphicon-remove"></span>')
              }
            }
            cardTrack = shuffle(cardTrack);
            //console.log("cardTrack after shuffle: " + cardTrack);
            for(var j = 0; j < cardTrack.length; j++)
              $('#cardTrack').append(cardTrack[j]);
            $('#cardTrack').css('display', '-webkit-flex');
            $('#cardTrack').css('display', 'flex');
            $('.missionStuff').css('display', 'none');
            $('#quest' + currentQuest).removeClass('glyphicon-question-sign');
            $('#questtext' + currentQuest).css('opacity', '0');
            if(quests[currentQuest - 1].success)
            {
              $('#quest' + currentQuest).addClass('glyphicon-ok-sign');
              if(data.gameEndReason == null)
                $('#status').html(playersChosenToString(playersChosen) + " went on quest " + currentQuest + " and it succeeded.<br>Waiting for leader to propose a quest...<br>Current voting track: "+ quests[currentQuest].votingTrack + '/5');
              else {
                $('#status').html(playersChosenToString(playersChosen) + " went on quest " + currentQuest + " and it succeeded.<br>" + data.gameEndReason);
              }
            }
            else {
              $('#quest' + currentQuest).addClass('glyphicon-remove-sign');
              if(data.gameEndReason == null)
                $('#status').html(playersChosenToString(playersChosen) + " went on quest " + currentQuest + " and it failed.<br>Waiting for leader to propose a quest...<br>Current voting track: "+ quests[currentQuest].votingTrack + '/5');
              else {
                $('#status').html(playersChosenToString(playersChosen) + " went on quest " + currentQuest + " and it failed.<br>" + data.gameEndReason);
              }
            }
            if(data.gameEndReason == null)
            {
              $('#player' + leadPlayer + ' .leadPlayer').addClass("glyphicon glyphicon-king");
              currentQuest++;
              $('#quest' + currentQuest).addClass('currentQuest');
              $('#questtext' + currentQuest).addClass('currentQuestText');
              if(ID === leadPlayer)
                prepareLead(quests, currentQuest);
            }
          }
        },

        votingTrackGameEnd: function(){
          endGame("Five quest proposals were rejected. Bad guys win!");
        },

        assassinationComplete: function(data){
          $('#header').text("Game over");
          $('#voteTrack').css('display', 'none');
          var merlin;
          var assassin;
          for(var i = 0; i < players.length; i++)
          {
            if(players[i].role == 'Merlin')
              merlin = players[i].name;
            else if(players[i].role == 'Assassin')
              assassin = players[i].name;
          }
          if(data.goodGuysWin)
          {
            $('#status').html("Assassin " + assassin + " assassinated " + players[data.target].name + ", who was not Merlin. <br>" + merlin + " was Merlin. <br>Good guys win!");
            if(players[ID].role == 'Morgana' || players[ID].role == 'Assassin' || players[ID].role == 'Generic Bad Guy')
              $('#accessCode').text("You lose!");
            else {
              $('#accessCode').text("You win!");
            }
          }
          else{
            $('#status').html("Assassin " + assassin + " assassinated " + merlin + ", who was Merlin. <br>Bad guys win!");
            if(players[ID].role == 'Morgana' || players[ID].role == 'Assassin' || players[ID].role == 'Generic Bad Guy')
              $('#accessCode').text("You win!");
            else {
              $('#accessCode').text("You lose!");
            }
          }

          $('#homebtn').css('display', 'inline-block');
          IO.socket.emit('gameEnd', accessCode);
        }



    }

    function prepareLead(quests, questNum) {
      ////console.log('i am lead');
      //console.dir(quests);
      playersChosen = [];
      $('.leadStuff').css('display', 'inline');
      $('#proposebtn').prop('disabled', 'true');
      $('#proposeStatus').html("You have not selected anyone to go on this quest.");
      $('#leadinfo').css('display', 'block');
      var currentQuest = questNum;
      $('#currentQuest').text('' + questNum);
      playersNeeded = quests[questNum - 1].numberOfPlayers;
      $('#questNumPeople').text('' + playersNeeded);
      ////console.log("playersNeeded: " + playersNeeded);
      $('#tableTitle').text("Quest " + questNum + ": Choose " + playersNeeded + " players");
      $('td').addClass('selectable');
    }

    function removeLeadUI() {
      //playersChosen = [];
      $('.leadStuff').css('display', 'none');
      $('#leadinfo').css('display', 'none');
      $('#tableTitle').text("Connected Players: " + players.length);
      $('.selectable').removeClass('selectable');
      $('.selected').removeClass('selected');
    }

    function votePassed(playersChosen) {
      //console.log(playersChosen);
      $('.voteStuff').css('display', 'none');
      cardsPlayed = [];
      var displayProposed = players[playersChosen[0]].name + ' and ' + players[playersChosen[1]].name;
      for(var i = 2; i < playersChosen.length; i++)
        displayProposed = players[playersChosen[i]].name + ', ' + displayProposed;
      $('#status').text("Vote passed. " + displayProposed + " will go on quest " + currentQuest + ".");
      for(var j = 0; j < playersChosen.length; j++)
      {
        $('#player' + playersChosen[j] + ' .missionIcon').addClass('glyphicon glyphicon-time');
        if(ID == playersChosen[j])
          prepareMission();
      }
    }

    function prepareMission() {
      $('.missionStuff').css('display', 'inline-block');
      $('.missionbtn').prop('disabled', false);
      if(players[ID].role === 'Percival' || players[ID].role === 'Merlin' || players[ID].role === 'Generic Good Guy')
      {
        $('#missionStatus').text("As a Loyal Servant of Arthur, you are only able to play a \"success\" card.");
        $('#failbtn').prop('disabled', 'true');
      }
      else {
        $('#missionStatus').text("As a Minion of Mordred, you can choose whether to play a \"success\" or \"fail\" card.");
      }
    }

    function prepareAssassination() {
      $('#tableTitle').text("Who do you think is Merlin?");
      $('#assassinatebtn').css('display', 'inline-block');
      $('td').addClass('assassinSelectable');
    }

    function voteFailed() {
      $('#status').html("Vote failed.<br>Current voting track: "+ quests[currentQuest - 1].votingTrack + '/5');
      $('#player' + leadPlayer + ' .leadPlayer').addClass("glyphicon glyphicon-king");

      if(ID === leadPlayer)
      {
        //console.log(quests);
        prepareLead(quests, currentQuest);
      }
      else {
        $('#status').html("Vote failed. Waiting for leader to propose a quest...<br>Current voting track: "+ quests[currentQuest - 1].votingTrack + '/5');
      }

    }

    $('table').on('click', '.selectable', function(event){
      //console.log('selectable clicked');
      var selectedPlayer;
      if($(this).hasClass('selected'))
      {
        //playersChosen.splice(playersChosen.indexOf(players[ID].name), 1);

        selectedPlayer = parseInt($(this).attr('id').substring(6));
        if(playersChosen.indexOf(selectedPlayer) > -1)
          playersChosen.splice(playersChosen.indexOf(selectedPlayer), 1);
        //console.log(playersChosen);
        $('#proposebtn').prop('disabled', true);
        updateProposeStatus();
        $(this).removeClass('selected');
      }
      else if(playersChosen.length < playersNeeded)
      {
        selectedPlayer = parseInt($(this).attr('id').substring(6));
        playersChosen.push(selectedPlayer);
        //console.log(playersChosen);
        if(playersChosen.length == playersNeeded)
          $('#proposebtn').prop('disabled', false);
        updateProposeStatus();
        $(this).addClass('selected');
      }
    });

    $('table').on('click', '.assassinSelectable', function(event){
      //console.log('assassinSelectable clicked');
      var selectedPlayer = null;
      if($(this).hasClass('assassinSelected'))
      {
        //playersChosen.splice(playersChosen.indexOf(players[ID].name), 1);

        selectedPlayer = null;
        $('#assassinatebtn').prop('disabled', true);
        updateAssassinateStatus(selectedPlayer);
        $(this).removeClass('assassinSelected');
      }
      else if(selectedPlayer == null)
      {
        selectedPlayer = parseInt($(this).attr('id').substring(6));
        $('#assassinate').prop('disabled', false);
        updateAssassinateStatus(selectedPlayer);
        $(this).addClass('assassinSelected');
      }
    });

    function updateProposeStatus(){
      if(playersChosen.length == 0)
        proposeStatus = "You have not selected anyone to go on this quest.";
      else if(playersChosen.length == 1)
        proposeStatus = "You have selected " + idToName(playersChosen[0]) + " to go on this quest.";
      else if(playersChosen.length == 2)
        proposeStatus = "You have selected " + idToName(playersChosen[0]) +
        " and " + idToName(playersChosen[1]) + " to go on this quest.";
      else if(playersChosen.length == 3)
        proposeStatus = "You have selected " + idToName(playersChosen[0]) +
        ", " + idToName(playersChosen[1]) +  " and " + idToName(playersChosen[2]) + " to go on this quest.";
      else if(playersChosen.length == 4)
        proposeStatus = "You have selected " + idToName(playersChosen[0]) +
        ", " + idToName(playersChosen[1]) +
        ", " + idToName(playersChosen[2]) +
        " and " + idToName(playersChosen[3]) + " to go on this quest.";
      else if(playersChosen.length == 5)
        proposeStatus = "You have selected " + idToName(playersChosen[0]) +
        ", " + idToName(playersChosen[1]) +
        ", " + idToName(playersChosen[2]) +
        ", " + idToName(playersChosen[3]) +
        " and " + idToName(playersChosen[4]) + " to go on this quest.";
      $('#proposeStatus').text(proposeStatus);
    }

    function updateAssassinateStatus(selectedPlayer){
      var assassinateStatus;
      if(selectedPlayer == null)
        assassinateStatus = "You have not selected anyone to assassinate.";
      else {
        assassinateStatus = "You have selected "+ selectedPlayer +" to assassinate.";
      }
      $('#assassinateStatus').text(assassinateStatus);
    }

    function idToName(ID){
      for(var i = 0; i < players.length; i++)
      {
        if(players[i].playerID == ID)
        {
          return players[i].name;
        }
      }
    }

    function endGame(gameEndReason)
    {
      $('#status').text(gameEndReason);
      $('.voteIcon').removeClass('glyphicon-ok');
      $('.voteIcon').removeClass('glyphicon-remove');
      if(gameEndReason == "Three quests have succeeded. Waiting on Assassin to guess Merlin...")
      {
        var assassinID;
        for(var i = 0; i < players.length; i++)
        {
          if(players[i].role == 'Assassin')
            assassinID = i;
        }
        $('.voteIcon #player' + assassinID).addClass('glyphicon-time');
        if(players[ID].role === 'Assassin')
        {
          prepareAssassination();
        }
      }
      else {
        $('#header').text("Game over");
        if(players[ID].role == 'Morgana' || players[ID].role == 'Assassin' || players[ID].role == 'Generic Bad Guy')
          $('#accessCode').text("You win!");
        else {
          $('#accessCode').text("You lose!");
        }
        $('#homebtn').css('display', 'inline-block');
        IO.socket.emit('gameEnd', accessCode);
      }
    }
    /*$('tr').on('click', '.selected', function(event){
      //console.log('selected clicked');

    });*/

    var App = {

    };
    $('#startbtn').one('click', function(){
      $('#startbtn').css('display', 'none');
      IO.socket.emit('hostStartGame', accessCode);
    });

    $('#proposebtn').on('click', function(){
      $('#proposebtn').css('display', 'none');
      removeLeadUI();
      //console.log('proposalSubmitted emitted with playersChosen ' + playersChosen);
      IO.socket.emit('proposalSubmitted', {"accessCode": accessCode, "lead": ID, "playersChosen": playersChosen, "quests": quests, "currentQuest": currentQuest});
    });

    $('.votebtn').on('click', function(){
      $('.votebtn').css('display', 'none');
      var approve = ($(this).attr('id') === 'approvebtn');
      //players[ID].vote = approve;
      //console.log('voteSubmitted emitted with players ' + players);
      IO.socket.emit('voteSubmitted', {"accessCode": accessCode, "voter": ID, "vote": approve, "players": players, "playersChosen": playersChosen, "quests": quests, "currentQuest": currentQuest});
    });

    $('.missionbtn').on('click', function(){
      $(this).prop('disabled', true);
      $('.missionbtn').css('display', 'none');
      var success = ($(this).attr('id') === 'successbtn');
      //cardsPlayed.push(success);
      //console.log('cardPlayed emitted with cardsPlayed ' + cardsPlayed);
      IO.socket.emit('cardPlayed', {"accessCode": accessCode, "player": ID, "cardPlayed": success, "cardsPlayed": cardsPlayed, "playersChosen": playersChosen, "quests": quests, "currentQuest": currentQuest});
    });

    $('#assassinatebtn').on('click', function(){
      $(this).css('display', 'none');
      var assassinSelected = $('.assassinSelected').attr('id').substring(6);
      //console.log('assassinate emitted with assassinSelected ' + assassinSelected);
      IO.socket.emit('assassinate', {"accessCode": accessCode, "assassinSelected": assassinSelected, "players": players});
    });



    function shuffle(array) {
      var m = array.length, t, i;

      // While there remain elements to shuffle…
      while (m) {

        // Pick a remaining element…
        i = Math.floor(Math.random() * m--);

        // And swap it with the current element.
        t = array[m];
        array[m] = array[i];
        array[i] = t;
      }

      return array;
    }

    function playersChosenToString(playersChosenArray){
      var displayProposed = players[playersChosenArray[0]].name + ' and ' + players[playersChosenArray[1]].name;
      for(var i = 2; i < playersChosenArray.length; i++)
        displayProposed = players[playersChosenArray[i]].name + ', ' + displayProposed;
      return displayProposed;
    }
    IO.init();
  });
</script>
